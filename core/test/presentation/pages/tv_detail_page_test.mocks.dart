// Mocks generated by Mockito 5.4.4 from annotations
// in bioskop_keren/test/presentation/pages/tv_detail_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i12;
import 'dart:ui' as _i13;

import 'package:core/domain/tv/entities/tv.dart' as _i10;
import 'package:core/domain/tv/entities/tv_detail.dart' as _i7;
import 'package:core/domain/tv/usecases/get_tv_by_id.dart' as _i4;
import 'package:core/domain/tv/usecases/get_tv_detail.dart' as _i2;
import 'package:core/domain/tv/usecases/get_tv_recommendations.dart' as _i3;
import 'package:core/domain/tv/usecases/insert_watchlist_tv.dart' as _i5;
import 'package:core/domain/tv/usecases/remove_watchlist_tv.dart' as _i6;
import 'package:core/presentation/provider/tv_detail_notifier.dart' as _i8;
import 'package:core/utils/state_enum.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetTvDetail_0 extends _i1.SmartFake implements _i2.GetTvDetail {
  _FakeGetTvDetail_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTvRecommendations_1 extends _i1.SmartFake
    implements _i3.GetTvRecommendations {
  _FakeGetTvRecommendations_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTvById_2 extends _i1.SmartFake implements _i4.GetTvById {
  _FakeGetTvById_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInsertWatchlistTv_3 extends _i1.SmartFake
    implements _i5.InsertWatchlistTv {
  _FakeInsertWatchlistTv_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRemoveWatchlistTv_4 extends _i1.SmartFake
    implements _i6.RemoveWatchlistTv {
  _FakeRemoveWatchlistTv_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTvDetail_5 extends _i1.SmartFake implements _i7.TvDetail {
  _FakeTvDetail_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TvDetailNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvDetailNotifier extends _i1.Mock implements _i8.TvDetailNotifier {
  MockTvDetailNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetTvDetail get getTvDetailUseCase => (super.noSuchMethod(
        Invocation.getter(#getTvDetailUseCase),
        returnValue: _FakeGetTvDetail_0(
          this,
          Invocation.getter(#getTvDetailUseCase),
        ),
      ) as _i2.GetTvDetail);

  @override
  _i3.GetTvRecommendations get getTvRecommendationsUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#getTvRecommendationsUseCase),
        returnValue: _FakeGetTvRecommendations_1(
          this,
          Invocation.getter(#getTvRecommendationsUseCase),
        ),
      ) as _i3.GetTvRecommendations);

  @override
  _i4.GetTvById get getTvByIdUseCase => (super.noSuchMethod(
        Invocation.getter(#getTvByIdUseCase),
        returnValue: _FakeGetTvById_2(
          this,
          Invocation.getter(#getTvByIdUseCase),
        ),
      ) as _i4.GetTvById);

  @override
  _i5.InsertWatchlistTv get insertWatchlistTvUseCase => (super.noSuchMethod(
        Invocation.getter(#insertWatchlistTvUseCase),
        returnValue: _FakeInsertWatchlistTv_3(
          this,
          Invocation.getter(#insertWatchlistTvUseCase),
        ),
      ) as _i5.InsertWatchlistTv);

  @override
  _i6.RemoveWatchlistTv get removeWatchlistTvUseCase => (super.noSuchMethod(
        Invocation.getter(#removeWatchlistTvUseCase),
        returnValue: _FakeRemoveWatchlistTv_4(
          this,
          Invocation.getter(#removeWatchlistTvUseCase),
        ),
      ) as _i6.RemoveWatchlistTv);

  @override
  _i7.TvDetail get tvDetail => (super.noSuchMethod(
        Invocation.getter(#tvDetail),
        returnValue: _FakeTvDetail_5(
          this,
          Invocation.getter(#tvDetail),
        ),
      ) as _i7.TvDetail);

  @override
  _i9.RequestState get tvDetailState => (super.noSuchMethod(
        Invocation.getter(#tvDetailState),
        returnValue: _i9.RequestState.Empty,
      ) as _i9.RequestState);

  @override
  List<_i10.Tv> get tvRecommendations => (super.noSuchMethod(
        Invocation.getter(#tvRecommendations),
        returnValue: <_i10.Tv>[],
      ) as List<_i10.Tv>);

  @override
  _i9.RequestState get recommendationState => (super.noSuchMethod(
        Invocation.getter(#recommendationState),
        returnValue: _i9.RequestState.Empty,
      ) as _i9.RequestState);

  @override
  String get message => (super.noSuchMethod(
        Invocation.getter(#message),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#message),
        ),
      ) as String);

  @override
  bool get isAddedToWatchlist => (super.noSuchMethod(
        Invocation.getter(#isAddedToWatchlist),
        returnValue: false,
      ) as bool);

  @override
  String get watchlistMessage => (super.noSuchMethod(
        Invocation.getter(#watchlistMessage),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#watchlistMessage),
        ),
      ) as String);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i12.Future<void> getTvDetail(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getTvDetail,
          [id],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> insertWatchlistTv(_i7.TvDetail? tvDetail) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertWatchlistTv,
          [tvDetail],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> removeWatchlistTv(_i7.TvDetail? tvDetail) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeWatchlistTv,
          [tvDetail],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> getTvById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getTvById,
          [id],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  void addListener(_i13.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i13.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
